const Payment = require('../../../modules/PaymentModule');
const mongoose = require('mongoose');
const paymobService = require('../../../Services/paymobService');
const Order = require('../../../modules/OrderModule'); // Ensure the path to your Order model is correct
const jwt = require('jsonwebtoken');
const User = require('../../../modules/UsersModule');

exports.initiatePayment = async (req, res) => {
  try {
    const { amount, billingData } = req.body;

    // Convert amount to number
    const amountInCents = parseFloat(amount) * 100;
    if (isNaN(amountInCents)) {
      return res.status(400).json({ message: 'Invalid amount' });
    }

    // Step 1: Get auth token
    const authToken = await paymobService.getAuthToken();

    // Step 2: Create order
    const order = await paymobService.createOrder(authToken, amountInCents);

    // Save order to the database
    const newOrder = new Order({
      orderId: order.id,
      amount: amountInCents,
      currency: "EGP",
      billingData: billingData,
      authToken: authToken
    });

    await newOrder.save(); // Save order to the database
    console.log('Order saved:', newOrder);

    // Step 3: Get payment key
    const paymentKey = await paymobService.getPaymentKey(authToken, order.id, amountInCents, billingData);

    res.json({ paymentKey });
  } catch (error) {
    console.error('Payment initiation failed:', error); // Log error details
    res.status(500).json({ message: 'Payment initiation failed', error: error.message });
  }

};


exports.initiateCreditCardPayment = async (req, res) => {
    try {
        // Extract and verify token
        const token = req.headers.token;
        if (!token) return res.status(401).json({ message: 'No token provided' });

        // Verify and decode the token
        const decodedToken = jwt.verify(token, 'your_secret_key'); // Ensure this matches your .env secret
        console.log('Decoded Token:', decodedToken); // Debugging line

        const userId = decodedToken._id; // Extract the user ID from the decoded token (use _id instead of id)
        const { amount, contentId } = req.body;

        // Validate input
        if (!userId || !amount || !contentId) {
            console.log('User ID:', userId); // Debugging line
            console.log('Amount:', amount); // Debugging line
            console.log('Content ID:', contentId); // Debugging line
            return res.status(400).json({ message: 'User ID, amount, and content ID are required' });
        }

        // Convert amount to cents (for Paymob)
        const amountInCents = parseFloat(amount) * 100;   
        if (isNaN(amountInCents)) {
            return res.status(400).json({ message: 'Invalid amount' });
        }

        // Get the user by ID
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        // Step 1: Create credit card payment
        const paymentResult = await paymobService.createCreditCardPayment(userId, amountInCents);

        // Step 2: Save payment details in the database
        const payment = new Payment({
            user: userId,
            amount: amountInCents,
            status: 'pending',
            method: 'credit_card',
            contentType: 'video', // Example, can be quiz or video
            contentId: contentId, // Use contentId from request body
            paymobOrderId: paymentResult.orderId,
            paymobPaymentKey: paymentResult.paymentToken,
            
        });

        await payment.save();

        // Return the payment URL for frontend to redirect to
        res.json({ paymentURL: paymentResult.paymentURL  , status: paymentResult.paymentStatus });
    } catch (error) {
        console.error('Credit card payment initiation failed:', error);
        res.status(500).json({ message: 'Payment initiation failed', error: error.message });
    }
};


